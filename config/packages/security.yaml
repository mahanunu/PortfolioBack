security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        login: # Ajout d'un pare-feu pour la route de login, si elle n'est pas couverte par main ou api
            pattern:  ^/api/auth
            stateless: true
            json_login:
                check_path: /api/auth # Doit correspondre à la route définie dans routes.yaml
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api: # Pare-feu pour les routes API protégées par JWT
            pattern:   ^/api
            stateless: true
            jwt: ~
        main: # Garder un pare-feu main peut être utile, mais il ne gérera plus l'authentification principale ici
            lazy: true
            provider: app_user_provider # Peut-être pas nécessaire si tout /api est couvert par le pare-feu api
            # Commentez ou supprimez form_login et logout si vous passez entièrement à JWT pour ces fonctionnalités
            # form_login:
            #     login_path: app_login
            #     check_path: app_login
            #     enable_csrf: true
            # logout:
            #     path: app_logout

    access_control:
        - { path: ^/api/auth, roles: PUBLIC_ACCESS }
        - { path: ^/api/users, methods: [POST], roles: PUBLIC_ACCESS }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
